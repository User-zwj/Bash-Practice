Bash built-in:
echo, export, set

------------------
Check https://askubuntu.com/questions/720678/what-does-export-path-somethingpath-mean for "export"
Check chmod in misc directory for chmod review.


## Execute the script
Method 1:
export PATH="$PATH:the_path_to_the_file"
chmod u+x filename.sh      #give execute permission
filename.sh

Method 2:
chmod u+x filename.sh
./filename.sh             #no need to put the file direc in the PATH

Method 3:
source filename.sh        #No need to change permission

Note: Method1 and 2 are executing the script in a subshell. While method3 is not. You can type $VALUE or $COLOUR after each to see if there returns anything.


## Script basics
Do Not leave the script with an empty first line.
First line starts with #!/bin/bash        #! followed by the path to the shell
Use hash mark # to make comments

## Debugging bash scripts
bash -x filename.sh      #debug the whole file
-------
# If only a portion in commented-script1.sh:
set -x
w
set+x
# Then run
filename.sh             #only part is debugged
------
# Debugging options
set -f      # Disable file name generation using metacharacters
set -v      # Prints shell input lines as they are read
set -x      # Print command traces before executing command
# These modes can be specified in the script itself, for example
#!/bin/bash -xv      #1:input; 2:command trace with +; 3:output


##Quoting characters
# Escape character 
    backslash \
    single quotes ' '
    double quotes " "
eg:
date=20000101
echo $date
echo \$date
echo '$date'
echo "$date"
echo "`date`"
echo "I'd say: \"Go for it!\""
echo "\"
echo "\\"


## Shell expansion
1. Brace expansion
echo sp{el,il,al}l
2. Tilde expansion
***
3. Variable expansion
echo $SHELL
echo ${!N*}
echo $FRANKY
echo ${FRANKY:=Franky}
4. Command substitution
when a command is enclose like 
$(command)
or
`command`
eg.
echo `date`
echo $(date)
5. Arithmetic expansion
$((Expression))
6. Process subsitution
7. Word splitting

















